# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package and Build Lambda Layer

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Select action to perform'
        required: true
        default: 'both'
        type: choice
        options:
          - both  # Deploy to PyPI and build Lambda layer
          - deploy_to_pypi  # Only deploy package to PyPI
          - build_lambda_layer  # Only build and attach Lambda layer to existing release

permissions:
  contents: write

jobs:
  deploy:
    if: github.event.inputs.job_to_run == 'deploy_to_pypi' || github.event.inputs.job_to_run == 'both' || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Wait for PyPI to update
      run: |
        echo "Waiting for PyPI to update..."
        sleep 300  # Wait for 5 minutes

  build-lambda-layer:
    needs: deploy
    if: |
      always() &&
      (github.event.inputs.job_to_run == 'build_lambda_layer' || 
       github.event.inputs.job_to_run == 'both' || 
       github.event_name == 'release') &&
      (needs.deploy.result == 'success' || 
       needs.deploy.result == 'skipped' || 
       github.event.inputs.job_to_run == 'build_lambda_layer')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Get Latest Release
      if: github.event_name != 'release'
      id: get_release
      run: |
        RELEASE_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
                     | jq -r '.upload_url')
        echo "RELEASE_URL=${RELEASE_URL}" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv setuptools wheel

    - name: Create Lambda Layer
      run: |
        virtualenv venv
        source venv/bin/activate
        pip install setuptools wheel
        mkdir python
        PACKAGE_VERSION=$(python setup.py --version)
        echo "coinbase-advancedtrade-python==$PACKAGE_VERSION" > requirements.txt
        docker run --rm -v "$PWD":/var/task public.ecr.aws/sam/build-python3.12:latest /bin/sh -c \
          "pip install setuptools wheel && \
           pip install \
           --platform manylinux2014_x86_64 \
           --only-binary=:all: \
           --implementation cp \
           --python-version 3.12 \
           --upgrade \
           -r requirements.txt \
           -t python"
        zip -r layer-python3.12-x86_64.zip python

    - name: Upload Layer to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event_name == 'release' && github.event.release.upload_url || env.RELEASE_URL }}
        asset_path: ./layer-python3.12-x86_64.zip
        asset_name: layer-python3.12-x86_64.zip
        asset_content_type: application/zip
